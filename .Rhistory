MMINP.preprocess(b)
MMINP.preprocess(test_metab)
class(a)
as.matrix(a)
class(b)
as.matrix(b)
class(newdata)
newdata <- as.matrix(newdata)
with(model, (newdata - newdata %*% W_Yosc %*% t(W_Yosc)) %*% W. %*% B_T. %*% t(C.))
model$W_Yosc
class(b[1,1])
class(b[2,])
class(b[2,2])
class(b[,2])
class(a[,2])
class(a[,5])
a
a[5,6] <- 1
class(a[5,6])
a
p.adjust(c(0.12,0.003,0.005), method = "a")
cor.test(test_metab$C00026, test_metab$C00077)
cor.test(test_metab$C00026, test_metab$C00077, method = "a")
cor.test(test_metab$C00026, test_metab$C00077, method = "kendel")
cor.test(test_metab$C00026, test_metab$C00077, method = "k")
cor.test(test_metab$C00026, test_metab$C00077, method = "k")$estimate
cor.test(test_metab$C00026, test_metab$C00077, method = "p")$estimate
cor.test(test_metab$C00026, test_metab$C00077, method = "s")$estimate
?MMINP.predict
?cor.test
?p.adjust
p.adjust
save(train_metab, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(train_metag, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(train_metab, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(train_metag, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(test_metab, file = "E:/Rcode/MMINP/data/test_metab.RData")
save(test_metag, file = "E:/Rcode/MMINP/data/test_metag.RData")
save(list = c(train_metag_preprocessed, train_metab_preprocessed), file = "E:/Rcode/MMINP/data/MMINP_train_preprocessed.RData")
save(MMINP_trained_model, file = "E:/Rcode/MMINP/data/MMINP_trained_model.RData")
save(test_metag_preprocessed, file = "E:/Rcode/MMINP/data/test_metag_preprocessed.RData")
save(list(train_metag_preprocessed, train_metab_preprocessed), file = "E:/Rcode/MMINP/data/MMINP_train_preprocessed.RData")
MMINP_train_preprocessed <- list(train_metag_preprocessed, train_metab_preprocessed)
save(MMINP_train_preprocessed, file = "E:/Rcode/MMINP/data/MMINP_train_preprocessed.RData")
MMINP_train_preprocessed[['train_metag_preprocessed']]
MMINP_train_preprocessed['train_metag_preprocessed']
save(train_metab_preprocessed, file = "E:/Rcode/MMINP/data/train_metab_preprocessed.RData")
save(train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag_preprocessed.RData")
?get_cvo2mComponent
?cor.test
class(train_metab)
View(train_metab)
rowSums(train_metab)[1:5]
colnames(train_metag)[1:5]
save(c(train_metag, train_metag_preprocessed), file = "E:/Rcode/MMINP/data/train_metag2.RData")
save(train_metag, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag2.RData")
save(train_metag, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(train_metab, train_metab_preprocessed, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(test_metag, test_metag_preprocessed, file = "E:/Rcode/MMINP/data/test_metag.RData")
save(test_metab, test_metab_preprocessed, file = "E:/Rcode/MMINP/data/test_metab.RData")
test_metab_preprocessed <- MMINP.preprocess(test_metab, normalized = F)
MMINP.preprocess
rownames(test_metab)
rowSums(test_metab)
save(test_metab, test_metab_preprocessed, file = "E:/Rcode/MMINP/data/test_metab.RData")
MMINP.train
a <- MMINP.train(metag = train_metag_preprocessed, metab = train_metab_preprocessed, n = 1:10, nx = 0:10, ny = 0:10)
MMINP_trained_model <- a
save(train_metag, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/example_train_metag.RData")
save(train_metab, train_metab_preprocessed, file = "E:/Rcode/MMINP/data/example_train_metab.RData")
save(test_metag, test_metag_preprocessed, file = "E:/Rcode/MMINP/data/example_test_metag.RData")
save(test_metab, test_metab_preprocessed, file = "E:/Rcode/MMINP/data/example_test_metab.RData")
save(MMINP_trained_model, file = "E:/Rcode/MMINP/data/example_MMINP_trained_model.RData")
save(MMINP_trained_model, file = "E:/Rcode/MMINP/data/MMINP_trained_model.RData")
class(MMINP_trained_model)
class(MMINP_trained_model$model)
library(MicrobiotaProcess)
data(hmp_aerobiosis_small)
hmp_aerobiosis_small
remotes::install_github("YuLab-SMU/MicrobiotaProcess")
remove.packages("MicrobiotaProcess", lib="~/R/win-library/4.0")
remotes::install_github("YuLab-SMU/MicrobiotaProcess")
tmg <- list(proportion = train_metag, preprocessed = train_metag_preprocessed)
save(tmg, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(tmg, file = "E:/Rcode/MMINP/data/train_metag.RData")
load("E:/Rcode/MMINP/data/train_metag.RData")
train_metag <- list(proportion = train_metag, preprocessed = train_metag_preprocessed)
train_metab <- list(proportion = train_metab, preprocessed = train_metab_preprocessed)
test_metag <- list(proportion = test_metag, preprocessed = test_metag_preprocessed)
test_metab <- list(proportion = test_metab, preprocessed = test_metab_preprocessed)
save(train_metag, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(train_metab, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(test_metag, file = "E:/Rcode/MMINP/data/test_metag.RData")
save(test_metab, file = "E:/Rcode/MMINP/data/test_metab.RData")
?MMINP.preprocess
?MMINP.train
mean(train_metab$preprocessed)
colMeans(train_metab$preprocessed)
apply(train_metab$preprocessed, 2, sd)
library(usethis)
library(testthat)
?expect_condition
expect_condition(colMeans(train_metab$preprocessed)<1e-5, TRUE)
expect_condition(all(colMeans(train_metab$preprocessed)<1e-5), TRUE)
expect_equivalent(all(colMeans(train_metab$preprocessed)<1e-5), TRUE)
expect_equivalent(colMeans(train_metab$preprocessed)<1e-5, TRUE)
expect_equal(all(colMeans(train_metab$preprocessed)<1e-5), TRUE)
MMINP.train(metag = metag_preprocessed,
metab = metab_preprocessed,
n = 0)
MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
n = 0)
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
n = 0))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
n = -1))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
nx = 0))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
nx = -4))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
nx = 'a'))
expect_error(MMINP.train(metag = train_metag$proportion,
metab = train_metab$proportion))
MMINP.predict(MMINP_trained_model$model, test_metag$preprocessed, minGeneSize = 1)
a <- MMINP.predict(MMINP_trained_model$model, test_metag$preprocessed, minGeneSize = 1)
expect_error(MMINP.predict(model = MMINP_trained_model,
newdata = test_metag$preprocessed,
minGeneSize = as.character(1)))
expect_error(MMINP.predict(model = MMINP_trained_model,
newdata = test_metag$preprocessed))
gene <- intersect(rownames(MMINP_trained_model$model$W.),
colnames(test_metag$preprocessed))
genesize <- length(gene)/nrow(MMINP_trained_model$model$W.)
expect_error(MMINP.predict(model = MMINP_trained_model,
newdata = test_metag$preprocessed,
minGeneSize = (genesize + 0.1)))
genesize
class(MMINP_trained_model)
expect_equal(class(MMINP_trained_model), 'list')
?`data.frame-class`
?data.frame
devtools::document()
devtools::load_all()
devtools::check()
install.packages("prettydoc")
.libPaths()
install.packages("prettydoc", lib = "D:/software/R-4.1.1/library")
devtools::check()
devtools::build()
install.packages("E:/Rcode/MMINP_0.0.0.9000.tar.gz", repos = NULL, type = "source")
setwd("E:/project/microbiome-predict-metabolome/compare3method_20220328/")
library(MMINP)
data(train_metab)
data(train_metag)
data("test_metab")
data("test_metag")
################################ MMINP
mbtscale <- MMINP.preprocess(train_metab, normalized = F)
mgtscale <- MMINP.preprocess(train_metag, normalized = F)
mbpscale <- MMINP.preprocess(test_metab, normalized = F)
mgpscale <- MMINP.preprocess(test_metag, normalized = F)
155/3
model1 <- MMINP.train(mgtscale, mbtscale,
n = 1:10, nx = 0:5, ny = 0:5,
nr_folds = 3, nr_cores = 10)
length(model1$trainres$wellPredicted)
129/130
mbp <- MMINP.predict(model = model1$model, mgpscale)
res <- compareFeatures(mbp, mbpscale)
length(res$wellPredicted)
53/129
############################### MelonnPan
library(melonnpan)
source("E:/project/microbiome-predict-metabolome/melonnpan_predict_modified.R")
dir.create(melonout <- "melon")
dir.create(melonout <- "melon")
melonnpan.train(metab = train_metab, metag = train_metag, outputDirectory = melonout, cores = 10)
weight <- read.table(paste0(melonout, "/MelonnPan_Trained_Weights.txt"),
header = T, row.names = 1, sep = "\t", quote = "")
weight <- read.table(paste0(melonout, "MelonnPan_Trained_Weights.txt"),
header = T, row.names = 1, sep = "\t", quote = "")
dir.create(melonout <- "melon/")
weight <- read.table(paste0(melonout, "MelonnPan_Trained_Weights.txt"),
header = T, row.names = 1, sep = "\t", quote = "")
metabpredict <- melonnpan.predict.modified(metag = test_metag, weight.matrix = weight,
train.metag = train_metag, corr.method = "spearman",
output = paste0(melonout, "predict"))
melonn_pred <- metabpredict$pred
rownames(melonn_pred) <- melonn_pred$ID
melonn_pred$ID <- NULL
melonn_res <- compareFeatures(melonn_pred, test_metab)
length(melonn_res$wellPredicted)
28/77
53/129
53/135
28/135
############################### optimize MMINP: preprocessing
#imitate MelonnPan
# # Metabolite Transformation
# metab<-apply(metab, 2, melonnpan:::ArcSin)
# # Sequence features' Transformation (DEFAULT Rank-Based Inverse Normal)
# metag<-apply(metag, 2, GenABEL::rntransform)
# pred<-apply(pred, 2, SqSin)
mbtMelon <- apply(train_metab, 2, melonnpan:::ArcSin)
mgtMelon <- apply(train_metag, 2, GenABEL::rntransform)
model2 <- MMINP.train(mgtMelon, mbtMelon,
n = 1:10, nx = 0:5, ny = 0:5,
nr_folds = 3, nr_cores = 10)
View(mbtMelon)
View(mgtMelon)
rownames(mgtMelon) <- rownames(train_metag)
model2 <- MMINP.train(mgtMelon, mbtMelon,
n = 1:10, nx = 0:5, ny = 0:5,
nr_folds = 3, nr_cores = 10)
length(model2$trainres$wellPredicted) #129
mgpMelon <- apply(test_metag, 2, GenABEL::rntransform)
rownames(mgpMelon) <- rownames(test_metag)
mbpMelon <- MMINP.predict(model = model2$model, mgpMelon)
View(mbpMelon)
hist(mbtMelon[, 1])
histogram(mbtMelon[, 1])
apply(mbtMelon, 2, mean)
apply(mbtMelon, 2, sd)
apply(mgtMelon, 2, sd)
apply(mgtMelon, 2, mean)
density(mbtMelon[, 1])
density(mbtMelon[, 1]) %>% plot()
density(train_metab[, 1]) %>% plot()
summary(model2$model)
View(mgpscale)
View(mgpMelon)
View(mbpMelon)
MMINP.predict
gene <- intersect(rownames(model2$model$W.), colnames(mgpMelon))
genesize <- length(gene)/nrow(model2$model$W.)
genesize
model <- model2$model
newdata <- mgpMelon
gene <- intersect(rownames(model$W.), colnames(newdata))
genesize <- length(gene)/nrow(model$W.)
if(genesize < minGeneSize){
stop("Genes in model contained in newdata are too less, maybe you should
change a model.")
}else if(genesize < 1){
message("newdata omits some genes compared with model, add with 0")
geneadd <- rownames(model$W.)[!rownames(model$W.) %in% gene]
adddata <- data.frame(matrix(0, ncol = length(geneadd)))
colnames(adddata) <- geneadd
newdata <- cbind(newdata, adddata)
}else if(genesize > 1){
newdata <- newdata[, gene]
}
minGeneSize <- 0.5
if(genesize < minGeneSize){
stop("Genes in model contained in newdata are too less, maybe you should
change a model.")
}else if(genesize < 1){
message("newdata omits some genes compared with model, add with 0")
geneadd <- rownames(model$W.)[!rownames(model$W.) %in% gene]
adddata <- data.frame(matrix(0, ncol = length(geneadd)))
colnames(adddata) <- geneadd
newdata <- cbind(newdata, adddata)
}else if(genesize > 1){
newdata <- newdata[, gene]
}
View(newdata)
newdata <- newdata[, rownames(model$W.)]
if(any(abs(colMeans(newdata)) > 1e-5))
message("Data is not centered, proceeding...")
if(!is.numeric(newdata))
newdata <- as.matrix(newdata)
pred = with(model, (newdata - newdata %*% W_Yosc %*% t(W_Yosc)) %*%
W. %*% B_T. %*% t(C.))
View(pred)
source("E:/Rcode/MMINP/R/MMINP_predict.R")
mbpMelon <- MMINP.predict(model = model2$model, mgpMelon)
remove.packages("MMINP")
install.packages("E:/Rcode/MMINP_0.0.0.9000.tar.gz", repos = NULL, type = "source", lib="D:/software/R-4.1.1/library")
library(MMINP)
MMINP.predict
mbpMelon <- MMINP.predict(model = model2$model, mgpMelon)
View(MMINP.predict)
rm(MMINP.predict)
library(MMINP)
mbpMelon <- MMINP.predict(model = model2$model, mgpMelon)
res2 <- compareFeatures(mbpMelon, test_metab)
View(pred)
model <- model2$model
newdata <- mgpMelon
minGeneSize
if(!is.numeric(minGeneSize))
stop("'minGeneSize' must be a numeric")
if(class(model) != "o2m")
stop("The model must be class o2m")
if(is.null(colnames(newdata)))
stop("The newdata has no column names")
checkInputdata(newdata)
gene <- intersect(rownames(model$W.), colnames(newdata))
genesize <- length(gene)/nrow(model$W.)
if(genesize < minGeneSize){
stop("Genes in model contained in newdata are too less, maybe you should
change a model.")
}else if(genesize < 1){
message("newdata omits some genes compared with model, add with 0")
geneadd <- rownames(model$W.)[!rownames(model$W.) %in% gene]
adddata <- data.frame(matrix(0, ncol = length(geneadd)))
colnames(adddata) <- geneadd
newdata <- cbind(newdata, adddata)
}else if(genesize > 1){
newdata <- newdata[, gene]
}
newdata <- newdata[, rownames(model$W.)]
if(any(abs(colMeans(newdata)) > 1e-5))
message("Data is not centered, proceeding...")
if(!is.numeric(newdata))
newdata <- as.matrix(newdata)
pred = with(model, (newdata - newdata %*% W_Yosc %*% t(W_Yosc)) %*%
W. %*% B_T. %*% t(C.))
View(pred)
MMINP.predict
mbpMelon <- MMINP.predict(model = model2$model, mgpMelon)
View(mbpMelon)
checkInputdata <- function(x){
if (!is.matrix(x) && !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))))
stop("'x' must be a numeric matrix or a data frame with all numeric-alike
variables")
if(any(is.na(x)))
stop("'x' contains NA")
# if(any(is.finite(x)))
#   stop("'x' contains non-finite elements")
NULL
}
#' @details
#' The model must be class 'o2m'.
#' The column of newdata must be microbial genes.
#' @export
#' @examples
#' data(MMINP_trained_model)
#' data(test_metag)
#' test_metag_preprocessed <- MMINP.preprocess(test_metag, normalized = FALSE)
#' pred_metab <- MMINP.predict(model = MMINP_trained_model$model,
#' newdata = test_metag_preprocessed)
MMINP.predict <- function(model, newdata, minGeneSize = 0.5) {
if(!is.numeric(minGeneSize))
stop("'minGeneSize' must be a numeric")
if(class(model) != "o2m")
stop("The model must be class o2m")
if(is.null(colnames(newdata)))
stop("The newdata has no column names")
checkInputdata(newdata)
gene <- intersect(rownames(model$W.), colnames(newdata))
genesize <- length(gene)/nrow(model$W.)
if(genesize < minGeneSize){
stop("Genes in model contained in newdata are too less, maybe you should
change a model.")
}else if(genesize < 1){
message("newdata omits some genes compared with model, add with 0")
geneadd <- rownames(model$W.)[!rownames(model$W.) %in% gene]
adddata <- data.frame(matrix(0, ncol = length(geneadd)))
colnames(adddata) <- geneadd
newdata <- cbind(newdata, adddata)
}else if(genesize > 1){
newdata <- newdata[, gene]
}
newdata <- newdata[, rownames(model$W.)]
if(any(abs(colMeans(newdata)) > 1e-5))
message("Data is not centered, proceeding...")
if(!is.numeric(newdata))
newdata <- as.matrix(newdata)
pred = with(model, (newdata - newdata %*% W_Yosc %*% t(W_Yosc)) %*%
W. %*% B_T. %*% t(C.))
return(pred)
}
newdata <- mgpMelon
if(!is.numeric(minGeneSize))
stop("'minGeneSize' must be a numeric")
if(class(model) != "o2m")
stop("The model must be class o2m")
if(is.null(colnames(newdata)))
stop("The newdata has no column names")
checkInputdata(newdata)
gene <- intersect(rownames(model$W.), colnames(newdata))
genesize <- length(gene)/nrow(model$W.)
if(genesize < minGeneSize){
stop("Genes in model contained in newdata are too less, maybe you should
change a model.")
}else if(genesize < 1){
message("newdata omits some genes compared with model, add with 0")
geneadd <- rownames(model$W.)[!rownames(model$W.) %in% gene]
adddata <- data.frame(matrix(0, ncol = length(geneadd)))
colnames(adddata) <- geneadd
newdata <- cbind(newdata, adddata)
}else if(genesize > 1){
newdata <- newdata[, gene]
}
newdata <- newdata[, rownames(model$W.)]
newdata[1:10, 1:10]
if(any(abs(colMeans(newdata)) > 1e-5))
message("Data is not centered, proceeding...")
if(!is.numeric(newdata))
newdata <- as.matrix(newdata)
pred = with(model, (newdata - newdata %*% W_Yosc %*% t(W_Yosc)) %*%
W. %*% B_T. %*% t(C.))
pred[1:5, 1:5]
MMINP.predict(model = model2$model, newdata = mgpMelon)
MMINP.predict(model = model2$model, mgpMelon)
mbpMelon <- MMINP.predict(model = model2$model, mgpMelon)
mbpMelon <- MMINP.predict(model = model2$model, mgpMelon)
res2 <- compareFeatures(mbpMelon, test_metab)
length(res$wellPredicted)  #53
length(res2$wellPredicted)  #53
mbpMelonT <-apply(mbpMelon, 2, SqSin)
res2 <- compareFeatures(mbpMelonT, test_metab)
length(res2$wellPredicted)  #53
rm(checkInputdata())
rm(checkInputdata
)
save(model1, "MMINP_model1.RData")
save(model2, "MMINP_model2_imitateMelon.RData")
save(model2, file = "MMINP_model2_imitateMelon.RData")
save(model1, file = "MMINP_model1.RData")
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
library(withr)
library(OmicsPLS)
library(withr)
library(MMINP)
data("train_metab")
data("train_metag")
data("test_metab")
data("test_metag")
library(withr)
crossval_o2m(train_metag, train_metag, a = 1:5, nx = 0:5, ny = 0:5)
crossval_o2m(train_metag, train_metag, a = 1:5, ax = 0:5, ay = 0:5)
crossval_o2m(train_metag, train_metag, a = 1:5, ax = 0:5, ay = 0:5, nr)
crossval_o2m(train_metag, train_metag, a = 1:5, ax = 0:5, ay = 0:5, nr_folds = 3)
crossval_o2m(train_metag, train_metag, a = 1:5, ax = 0:5, ay = 0:5, nr_folds = 3)
crossval_o2m(train_metag, train_metag, a = 1:5, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10)
mbtscale <- MMINP.preprocess(train_metab, normalized=F)
mgtscale <- MMINP.preprocess(train_metag, normalized=F)
crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10)
crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10)
crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10)
with_seed(1234, crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10))
with_seed(1234, crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10))
set.seed(1234)
crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10)
crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10)
set.seed(1234)
crossval_o2m(mgtscale, mbtscale, a = 3:10, ax = 0:5, ay = 0:5, nr_folds = 3, nr_cores = 10)
help(package = "OmicsPLS")
with_seed(1234, sample(15))
with_seed(1234, sample(15))
with_seed(1234, sample(15))
with_seed(1234, sample(15))
with_seed(1234, sample(15))
?is
?MMINP.train
MMINP.train
get_Components
?inherits
inherits
is
data("MMINP_trained_model")
is(MMINP_trained_model, "mminp")
is(MMINP_trained_model$model, "o2m")
inherits(MMINP_trained_model$model, "o2m")
!inherits(MMINP_trained_model$model, "o2m")
identical(rownames(train_metab), rownames(train_metag))
identical(rownames(train_metab), rownames(test_metag))
?identical
c(1:3) > 1 | 0<1
c(1:3) > 1 || 0 < 1
devtools::load_all()
devtools::document()
devtools::check()
a <- matrix(1:15, nrow = 3)
a2 <- MMINP.preprocess(a)
a2
a
MMINP.preprocess(a, normalized = T, scaled = F, logtransformed = F)
MMINP.preprocess(a, normalized = T, scaled = F, logtransformed = T)
MMINP.preprocess(a, normalized = T, scaled = T, logtransformed = T)
a2
is.na(a2)
any(is.na(a2))
apply(a2, 2, function(x) all(is.na(x)))
na.omit(a2)
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
