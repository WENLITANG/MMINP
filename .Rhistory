}
if(!all(apply(newdata, 2, is.numeric)))
newdata <- convertNumericMatrix(newdata)
pred = with(model, (newdata - newdata %*% W_Yosc %*% t(W_Yosc)) %*% W. %*% B_T. %*% t(C.))
model$W_Yosc %>% dim()
model$W_Yosc %>% class()
newdata %>% class()
#' @title  Convert input table into a numeric matrix
#' @param x A matrix or data frame.
#' @return A numeric matrix.
#' @importFrom magrittr %>%
#' @export
#' @example
#' data(train_metag)
#' d <- convertNumericMatrix(train_metag)
#' d[1:5, 1:5]
#' apply(d, 2, is.numeric) %>% head
convertNumericMatrix <- function(x){
if (!is.matrix(x) & !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))) | !is.matrix(x)){
rowNames <- rownames(x)
colNames <- colnames(x)
#convert to matrix
x <- apply(x, 2, as.numeric) %>% as.data.frame() %>% as.matrix()
rownames(x) <- rowNames
colnames(x) <- colNames
}
#return
x
}
if(!all(apply(newdata, 2, is.numeric)))
newdata <- convertNumericMatrix(newdata)
newdata %>% class()
View(pred)
#' @title  Convert input table into a numeric matrix
#' @param x A matrix or data frame.
#' @return A numeric matrix.
#' @importFrom magrittr %>%
#' @export
#' @example
#' data(train_metag)
#' d <- convertNumericMatrix(train_metag)
#' d[1:5, 1:5]
#' apply(d, 2, is.numeric) %>% head
convertNumericMatrix <- function(x){
if (!is.matrix(x) & !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))) | !is.matrix(x)){
rowNames <- rownames(x)
colNames <- colnames(x)
#convert to matrix
x <- apply(x, 2, as.numeric) %>% as.data.frame() %>% as.matrix()
rownames(x) <- rowNames
colnames(x) <- colNames
}
}
class(newdata)
convertNumericMatrix(newdata) %>% class()
#' @title  Convert input table into a numeric matrix
#' @param x A matrix or data frame.
#' @return A numeric matrix.
#' @importFrom magrittr %>%
#' @export
#' @example
#' data(train_metag)
#' d <- convertNumericMatrix(train_metag)
#' d[1:5, 1:5]
#' apply(d, 2, is.numeric) %>% head
convertNumericMatrix <- function(x){
if (!is.matrix(x) & !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))) | !is.matrix(x)){
rowNames <- rownames(x)
colNames <- colnames(x)
#convert to matrix
x <- apply(x, 2, as.numeric) %>% as.data.frame() %>% as.matrix()
rownames(x) <- rowNames
colnames(x) <- colNames
}
x
}
convertNumericMatrix(newdata) %>% class()
convertNumericMatrix(newdata) %>% class()
convertNumericMatrix(newdata) %>% class()
convertNumericMatrix(newdata) %>% class()
class(newdata)
#' @title  Convert input table into a numeric matrix
#' @param x A matrix or data frame.
#' @return A numeric matrix.
#' @importFrom magrittr %>%
#' @export
#' @example
#' data(train_metag)
#' d <- convertNumericMatrix(train_metag)
#' d[1:5, 1:5]
#' apply(d, 2, is.numeric) %>% head
convertNumericMatrix <- function(x){
if (!is.matrix(x) & !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))) | !is.matrix(x)){
rowNames <- rownames(x)
colNames <- colnames(x)
#convert to matrix
x <- apply(x, 2, as.numeric) %>% as.data.frame() %>% as.matrix()
rownames(x) <- rowNames
colnames(x) <- colNames
print("22222222")
}
x
}
convertNumericMatrix(newdata) %>% class()
#' @title  Convert input table into a numeric matrix
#' @param x A matrix or data frame.
#' @return A numeric matrix.
#' @importFrom magrittr %>%
#' @export
#' @example
#' data(train_metag)
#' d <- convertNumericMatrix(train_metag)
#' d[1:5, 1:5]
#' apply(d, 2, is.numeric) %>% head
convertNumericMatrix <- function(x){
if (!is.matrix(x) && !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))) || !is.matrix(x)){
rowNames <- rownames(x)
colNames <- colnames(x)
#convert to matrix
x <- apply(x, 2, as.numeric) %>% as.data.frame() %>% as.matrix()
rownames(x) <- rowNames
colnames(x) <- colNames
print("22222222")
}
x
}
convertNumericMatrix(newdata) %>% class()
convertNumericMatrix(newdata) %>% class()
convertNumericMatrix(newdata) %>% class()
convertNumericMatrix(newdata) %>% class()
#' @title  Convert input table into a numeric matrix
#' @param x A matrix or data frame.
#' @return A numeric matrix.
#' @importFrom magrittr %>%
#' @export
#' @example
#' data(train_metag)
#' d <- convertNumericMatrix(train_metag)
#' d[1:5, 1:5]
#' apply(d, 2, is.numeric) %>% head
convertNumericMatrix <- function(x){
if (!is.matrix(x) && !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))) || !is.matrix(x)){
rowNames <- rownames(x)
colNames <- colnames(x)
#convert to matrix
x <- apply(x, 2, as.numeric) %>% as.data.frame() %>% as.matrix()
rownames(x) <- rowNames
colnames(x) <- colNames
}
x
}
newdata %>% class()
a <- newdata[1:5, 1:5]
a
as.matrix(a)
apply(a, 2, as.numeric)
apply(a, 2, as.numeric) %>% class()
a
a$c <- c("a", "b", "c", "c", "a")
class(a$c)
a$f <- as.factor(a$c)
class(a$f)
as.matrix(a)
a$n <- c("NA")
is.na(a$n)
a$n
a
a
MMINP.preprocess(a)
#' The row of dta must be samples and column of dta must be metabolites or microbial features.
#' The filter ('prev' and 'abund') is for relative abundance of features.
#' @export
#' @examples
#' data(train_metag)
#' d <- MMINP.preprocess(train_metag)
#' apply(d, 2, sd) %>% head()
#' d <- MMINP.preprocess(train_metag, prev = 0.3, abund = 0.001)
#' d[1:5, 1:5]
#'
MMINP.preprocess <- function(dta, normalized = T, prev = NA, abund = NA,
logtransformed = T, scaled = T){
if(normalized){
dta <- dta %>% apply(2, function(x) x/sum(x))
}
dta <- filterInputdata(dta, prev = prev, abund = abund)
if(ncol(dta) <2)
stop("The filter is too strict, please reduce the value of 'prev' or 'abund'" )
if(logtransformed)
dta <- log10(dta + 1e-6)
if(scaled)
dta <- scale(dta)
return(dta)
}
MMINP.preprocess(a)
MMINP.preprocess(train_metab[1:5, 1:5])
b <- train_metab[1:5, 1:5]
class(b)
apply(b, 2, class)
a
apply(a, 2, class)
sum(character(1:5))
sum(c("1", "2", "3"))
a
b
apply(b, 2, class)
MMINP.preprocess(b)
MMINP.preprocess(b, prev = 1, abund = 2)
MMINP.preprocess(b, prev = 1, abund = 0.1)
MMINP.preprocess(b, prev = 1, abund = 0.0001)
MMINP.preprocess(b, prev = 1, abund = 0.000001)
MMINP.preprocess(b, prev = 0.8, abund = 0.000001)
b
5*1
#' Columns which values are all 0 will be filterd.
#' @param x A matrix or data frame.
#' @param prev A numeric ranging from 0 to 1, the minimum prevalence of features to be retained. If set to NA, means no need to filter prevalence.
#' @param abund A numeric greater than 0, the minimum abundance (mean) of features to be retained. If set to NA, means no need to filter abundance.
#' @return A filtered feature table.
#' @example
#' data(train_metag)
#' d <- filterInputdata(train_metag, prev = 0.8)
#' dim(train_metag)
#' dim(d)
filterInputdata <- function(x, prev = NA, abund = NA){
if(!all(apply(x, 2, is.numeric)))
x <- convertNumericMatrix(x)
if(!is.na(prev)){
if(!is.numeric(prev) | prev < 0 | prev > 1)
stop("'prev' must be a numeric ranging from 0 to 1")
x <- x[, apply(x, 2, function(y) length(which(y>0))>= (nrow(x) * prev))]
}
if(!is.na(abund)){
if(!is.numeric(abund) | abund < 0)
stop("'abund' must be a numeric greater than 0")
x <- x[, colMeans(x) > abund]
}
x <- x[, colSums(x) > 0]
return(x)
}
MMINP.preprocess(b, prev = 1, abund = 0.000001)
?vector
b[3, 3] <- NA
MMINP.preprocess(b, prev = 1, abund = 0.000001)
b
MMINP.preprocess(b)
b[3, 3] <- NaN
b
MMINP.preprocess(b)
is.numeric(b$C00077)
sum(a)
colSums(a)
colSums(b)
sum
a %*% b
checkInputdata <- function(x){
if (!is.matrix(x) && !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))))
stop("'x' must be a numeric matrix or a data frame with all numeric-alike variables")
if(any(is.na(x)))
stop("'x' contains NA")
}
#' The row of dta must be samples and column of dta must be metabolites or microbial features.
#' The filter ('prev' and 'abund') is for relative abundance of features.
#' @export
#' @examples
#' data(train_metag)
#' d <- MMINP.preprocess(train_metag)
#' apply(d, 2, sd) %>% head()
#' d <- MMINP.preprocess(train_metag, prev = 0.3, abund = 0.001)
#' d[1:5, 1:5]
#'
MMINP.preprocess <- function(dta, normalized = T, prev = NA, abund = NA,
logtransformed = T, scaled = T){
checkInputdata(dta)
if(normalized){
dta <- dta %>% apply(2, function(x) x/sum(x))
}
dta <- filterInputdata(dta, prev = prev, abund = abund)
if(ncol(dta) <2)
stop("The filter is too strict, please reduce the value of 'prev' or 'abund'" )
if(logtransformed)
dta <- log10(dta + 1e-6)
if(scaled)
dta <- scale(dta)
return(dta)
}
MMINP.preprocess(a)
MMINP.preprocess(b)
#' @title  Check if input data satisfy input conditions
#' @description
#' This function throws an error if 'x' is not a numeric matrix or a data frame with all numeric-alike variables, or if any elements of 'x' is \code{NA}.
#' @param x A matrix or data frame.
#' @return NULL
checkInputdata <- function(x){
if (!is.matrix(x) && !is.data.frame(x))
stop("'x' must be a matrix or data frame")
if(any(apply(x, 2, function(y) !is.numeric(y))))
stop("'x' must be a numeric matrix or a data frame with all numeric-alike variables")
if(any(is.na(x)))
stop("'x' contains NA")
NULL
}
#' The row of dta must be samples and column of dta must be metabolites or microbial features.
#' The filter ('prev' and 'abund') is for relative abundance of features.
#' @export
#' @examples
#' data(train_metag)
#' d <- MMINP.preprocess(train_metag)
#' apply(d, 2, sd) %>% head()
#' d <- MMINP.preprocess(train_metag, prev = 0.3, abund = 0.001)
#' d[1:5, 1:5]
#'
MMINP.preprocess <- function(dta, normalized = T, prev = NA, abund = NA,
logtransformed = T, scaled = T){
checkInputdata(dta)
if(normalized){
dta <- dta %>% apply(2, function(x) x/sum(x))
}
dta <- filterInputdata(dta, prev = prev, abund = abund)
if(ncol(dta) <2)
stop("The filter is too strict, please reduce the value of 'prev' or 'abund'" )
if(logtransformed)
dta <- log10(dta + 1e-6)
if(scaled)
dta <- scale(dta)
return(dta)
}
MMINP.preprocess(b)
MMINP.preprocess(test_metab)
class(a)
as.matrix(a)
class(b)
as.matrix(b)
class(newdata)
newdata <- as.matrix(newdata)
with(model, (newdata - newdata %*% W_Yosc %*% t(W_Yosc)) %*% W. %*% B_T. %*% t(C.))
model$W_Yosc
class(b[1,1])
class(b[2,])
class(b[2,2])
class(b[,2])
class(a[,2])
class(a[,5])
a
a[5,6] <- 1
class(a[5,6])
a
p.adjust(c(0.12,0.003,0.005), method = "a")
cor.test(test_metab$C00026, test_metab$C00077)
cor.test(test_metab$C00026, test_metab$C00077, method = "a")
cor.test(test_metab$C00026, test_metab$C00077, method = "kendel")
cor.test(test_metab$C00026, test_metab$C00077, method = "k")
cor.test(test_metab$C00026, test_metab$C00077, method = "k")$estimate
cor.test(test_metab$C00026, test_metab$C00077, method = "p")$estimate
cor.test(test_metab$C00026, test_metab$C00077, method = "s")$estimate
?MMINP.predict
?cor.test
?p.adjust
p.adjust
save(train_metab, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(train_metag, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(train_metab, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(train_metag, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(test_metab, file = "E:/Rcode/MMINP/data/test_metab.RData")
save(test_metag, file = "E:/Rcode/MMINP/data/test_metag.RData")
save(list = c(train_metag_preprocessed, train_metab_preprocessed), file = "E:/Rcode/MMINP/data/MMINP_train_preprocessed.RData")
save(MMINP_trained_model, file = "E:/Rcode/MMINP/data/MMINP_trained_model.RData")
save(test_metag_preprocessed, file = "E:/Rcode/MMINP/data/test_metag_preprocessed.RData")
save(list(train_metag_preprocessed, train_metab_preprocessed), file = "E:/Rcode/MMINP/data/MMINP_train_preprocessed.RData")
MMINP_train_preprocessed <- list(train_metag_preprocessed, train_metab_preprocessed)
save(MMINP_train_preprocessed, file = "E:/Rcode/MMINP/data/MMINP_train_preprocessed.RData")
MMINP_train_preprocessed[['train_metag_preprocessed']]
MMINP_train_preprocessed['train_metag_preprocessed']
save(train_metab_preprocessed, file = "E:/Rcode/MMINP/data/train_metab_preprocessed.RData")
save(train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag_preprocessed.RData")
?get_cvo2mComponent
?cor.test
class(train_metab)
View(train_metab)
rowSums(train_metab)[1:5]
colnames(train_metag)[1:5]
save(c(train_metag, train_metag_preprocessed), file = "E:/Rcode/MMINP/data/train_metag2.RData")
save(train_metag, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag2.RData")
save(train_metag, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(train_metab, train_metab_preprocessed, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(test_metag, test_metag_preprocessed, file = "E:/Rcode/MMINP/data/test_metag.RData")
save(test_metab, test_metab_preprocessed, file = "E:/Rcode/MMINP/data/test_metab.RData")
test_metab_preprocessed <- MMINP.preprocess(test_metab, normalized = F)
MMINP.preprocess
rownames(test_metab)
rowSums(test_metab)
save(test_metab, test_metab_preprocessed, file = "E:/Rcode/MMINP/data/test_metab.RData")
MMINP.train
a <- MMINP.train(metag = train_metag_preprocessed, metab = train_metab_preprocessed, n = 1:10, nx = 0:10, ny = 0:10)
MMINP_trained_model <- a
save(train_metag, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/example_train_metag.RData")
save(train_metab, train_metab_preprocessed, file = "E:/Rcode/MMINP/data/example_train_metab.RData")
save(test_metag, test_metag_preprocessed, file = "E:/Rcode/MMINP/data/example_test_metag.RData")
save(test_metab, test_metab_preprocessed, file = "E:/Rcode/MMINP/data/example_test_metab.RData")
save(MMINP_trained_model, file = "E:/Rcode/MMINP/data/example_MMINP_trained_model.RData")
save(MMINP_trained_model, file = "E:/Rcode/MMINP/data/MMINP_trained_model.RData")
class(MMINP_trained_model)
class(MMINP_trained_model$model)
library(MicrobiotaProcess)
data(hmp_aerobiosis_small)
hmp_aerobiosis_small
remotes::install_github("YuLab-SMU/MicrobiotaProcess")
remove.packages("MicrobiotaProcess", lib="~/R/win-library/4.0")
remotes::install_github("YuLab-SMU/MicrobiotaProcess")
tmg <- list(proportion = train_metag, preprocessed = train_metag_preprocessed)
save(tmg, train_metag_preprocessed, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(tmg, file = "E:/Rcode/MMINP/data/train_metag.RData")
load("E:/Rcode/MMINP/data/train_metag.RData")
train_metag <- list(proportion = train_metag, preprocessed = train_metag_preprocessed)
train_metab <- list(proportion = train_metab, preprocessed = train_metab_preprocessed)
test_metag <- list(proportion = test_metag, preprocessed = test_metag_preprocessed)
test_metab <- list(proportion = test_metab, preprocessed = test_metab_preprocessed)
save(train_metag, file = "E:/Rcode/MMINP/data/train_metag.RData")
save(train_metab, file = "E:/Rcode/MMINP/data/train_metab.RData")
save(test_metag, file = "E:/Rcode/MMINP/data/test_metag.RData")
save(test_metab, file = "E:/Rcode/MMINP/data/test_metab.RData")
?MMINP.preprocess
?MMINP.train
mean(train_metab$preprocessed)
colMeans(train_metab$preprocessed)
apply(train_metab$preprocessed, 2, sd)
library(usethis)
library(testthat)
?expect_condition
expect_condition(colMeans(train_metab$preprocessed)<1e-5, TRUE)
expect_condition(all(colMeans(train_metab$preprocessed)<1e-5), TRUE)
expect_equivalent(all(colMeans(train_metab$preprocessed)<1e-5), TRUE)
expect_equivalent(colMeans(train_metab$preprocessed)<1e-5, TRUE)
expect_equal(all(colMeans(train_metab$preprocessed)<1e-5), TRUE)
MMINP.train(metag = metag_preprocessed,
metab = metab_preprocessed,
n = 0)
MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
n = 0)
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
n = 0))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
n = -1))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
nx = 0))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
nx = -4))
expect_error(MMINP.train(metag = train_metag$preprocessed,
metab = train_metab$preprocessed,
nx = 'a'))
expect_error(MMINP.train(metag = train_metag$proportion,
metab = train_metab$proportion))
MMINP.predict(MMINP_trained_model$model, test_metag$preprocessed, minGeneSize = 1)
a <- MMINP.predict(MMINP_trained_model$model, test_metag$preprocessed, minGeneSize = 1)
expect_error(MMINP.predict(model = MMINP_trained_model,
newdata = test_metag$preprocessed,
minGeneSize = as.character(1)))
expect_error(MMINP.predict(model = MMINP_trained_model,
newdata = test_metag$preprocessed))
gene <- intersect(rownames(MMINP_trained_model$model$W.),
colnames(test_metag$preprocessed))
genesize <- length(gene)/nrow(MMINP_trained_model$model$W.)
expect_error(MMINP.predict(model = MMINP_trained_model,
newdata = test_metag$preprocessed,
minGeneSize = (genesize + 0.1)))
genesize
class(MMINP_trained_model)
expect_equal(class(MMINP_trained_model), 'list')
?`data.frame-class`
?data.frame
usethis::use_vignette('MMINP')
data("test_metab")
class(test_metab$proportion)
data("test_metag")
data("train_metab")
data("train_metag")
test_metab <- test_metab$proportion
test_metag <- test_metag$proportion
train_metab <- train_metab$proportion
train_metag <- train_metag$proportion
usethis::use_data(train_metab, compress = 'xz')
usethis::use_data(train_metab, compress = 'xz')
usethis::use_data(train_metag, compress = 'xz')
usethis::use_data(test_metag, compress = 'xz')
usethis::use_data(test_metab, compress = 'xz')
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::test()
devtools::build()
library(MMINP)
data(train_metag)
MMINP.preprocess(train_metag, normalized = FALSE)
